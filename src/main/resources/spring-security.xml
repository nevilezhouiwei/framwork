<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/context
	    http://www.springframework.org/schema/context/spring-context.xsd
	    http://www.springframework.org/schema/aop
	    http://www.springframework.org/schema/aop/spring-aop.xsd
	    http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">

    <!--彻底释放静态资源，不进过Spring Security-->
    <!-- SpringMVC也有释放静态资源-->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <!-- 配置springSecurty-->
    <!--
    auto-config:自动加载springSecurity的配置文件
    expressions：使用spring的el表达式来配置springsecurity

    -->
    <security:http auto-config="true" use-expressions="true">
        <!-- 运行匿名访问，同时也要经过spring security 的过滤器链 -->
        <security:intercept-url pattern="/login.jsp" access="permitAll()"/>

        <!--拦截资源-->
        <!--
    pattern="/**" 拦截所有的资源
    access="hasAnyRole('ROLE_USER')"  可以配置多个角色，拥有一个其中的角色就可以访问
        -->

        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER')"/>


        <!--配置自定义登录页面，以表单形式-->
        <!--
        login-page="/login.jsp"  自定义登录页面
        login-processing-url="/login" 认证的处理器地址 /login是框架自带的
        default-target-url="/index.jsp" 默认登录后转发页面
        authentication-failure-url="/failed.jsp" 认证失败页面
        username-parameter=""
        password-parameter=""
        -->

                <security:form-login
                                    login-page="/login.jsp"
                                    login-processing-url="/login"
                                    default-target-url="/index.jsp"
                                    authentication-failure-url="/failed.jsp"/>
        <!--配置退出信息-->
        <!--
        logout-url="/logout"  退出URL
        logout-success-url="/login.jsp" 退出成功返回页面
        -->
        <security:logout logout-url="/logout"
                         logout-success-url="/login.jsp"/>

        <!-- csrf 拦截关闭 表单中提交的方法一定要用 post 请求方式 -->
        <!--<security:csrf disabled="true"/>-->

    </security:http>
    <!--模拟内存用户-->
    <!--
    springSecurity默认加密认证 password="{noop}user不加密认证
    -->
    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="user" authorities="ROLE_USER" password="{noop}user"/>
                <security:user name="admin" authorities="ROLE_ADMIN" password="{noop}admin"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>

</beans>