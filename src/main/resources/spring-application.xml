<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/jms
    http://www.springframework.org/schema/jms/spring-jms.xsd">
    <!--开启自动扫描，将注解放入容器-->
    <context:component-scan base-package="com.nevile">
        <!-- 排除control中的注入，由controller MVC的文件单独负责-->
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    </context:component-scan>

    <!--加载properties配置文件,选配-->
    <context:property-placeholder location="classpath:jdbc.properties" file-encoding="UTF-8"/>


    <!--配置数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!--事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--开启基于注解的事务管理-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--mybatis SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 配置mybatis-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mapper/**/*Mapper.xml"/>
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.nevile.**.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
<!--MQ的连接工厂-->
    <bean id="activeMQConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://127.0.0.1:61616"/>
        <property name="password" value="123"/>
        <property name="userName" value="user"/>
    </bean>

    <!--2. Spring Caching 连接工厂(类似数据库线程池的东西，减少连接的创建。) org.springframework.jms.connection.CachingConnectionFactory-->
    <!-- 由于jmsTemplate每次发送消息都需要创建连接和创建session了，所以引入这个类似连接池的连接工厂，优化Mq的性能 -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
        <!-- 目标连接工厂 指向 ActiveMq工厂 -->
        <constructor-arg name="targetConnectionFactory" ref="activeMQConnectionFactory"/>
        <!-- session缓存的最大个数-->
        <property name="sessionCacheSize" value="10" />
    </bean>

    <!-- 3.配置jmsTemplate，用于发送发送mq消息 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <constructor-arg name="connectionFactory" ref="connectionFactory"/>

        <!-- 设置 jmsTemplate 不支持订阅模式，即：只支持queue模式。
             如果项目需要同时支持queue和topic，那么就需要另外注册一个jmsTemplate（把pubSubDomain设为true）-->
        <property name="pubSubDomain" value="false"/>
    </bean>

    <bean id="jmsTemplateTopic" class="org.springframework.jms.core.JmsTemplate">
        <constructor-arg name="connectionFactory" ref="connectionFactory"/>

        <!-- 设置 jmsTemplate 不支持订阅模式，即：只支持queue模式。
             如果项目需要同时支持queue和topic，那么就需要另外注册一个jmsTemplate（把pubSubDomain设为true）-->
        <property name="pubSubDomain" value="true"/>
    </bean>

        <!-- 4.定义Queue监听器 -->

        <jms:listener-container destination-type="queue" connection-factory="connectionFactory">
            <!-- 每添加一个queue的监听，都需要在这里添加一个配置 -->
            <!-- 这样配置就可以方便的对多个队列监听 , 每增加一个队列只需要添加一个 jms:listener -->
            <!-- destination:队列名称, ref:指向对应的监听器对象 -->
            <!-- 示例: <jms:listener destination="queueName" ref="consumerBean" /> -->
            <jms:listener destination="test1" ref="testAConsumerListener"/>
            <jms:listener destination="test2" ref="testAConsumerListener"/>
        </jms:listener-container>

    <jms:listener-container destination-type="topic" connection-factory="connectionFactory">
        <!-- 每添加一个queue的监听，都需要在这里添加一个配置 -->
        <!-- 这样配置就可以方便的对多个队列监听 , 每增加一个队列只需要添加一个 jms:listener -->
        <!-- destination:队列名称, ref:指向对应的监听器对象 -->
        <!-- 示例: <jms:listener destination="queueName" ref="consumerBean" /> -->
        <jms:listener destination="Topictest1" ref="mqTopicASubListener"/>
        <jms:listener destination="Topictest1" ref="mqTopicBSubListener"/>
    </jms:listener-container>


    <!--引入springSecurity配置文件-->
    <import resource="classpath:spring-security.xml"/>

</beans>